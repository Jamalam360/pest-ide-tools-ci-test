name: Release Extensions

on:
  push:
    tags:
      - "*"

jobs:
  release:
    runs-on: ubuntu-latest
    # Gives access to the VSCE_PAT, OVSX_TOKEN secret
    # environment: vsce
    permissions:
      # Allows creation of releases
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup
        with:
          kind: release
          secret: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install VSCode NPM Packages
      # working-directory: vscode
      # run: npm install

      # - name: Package VSCode Extension
      # working-directory: vscode
      # run: npm run package

      # - name: Publish to VSCode Marketplace
      # working-directory: vscode
      # run: npm run publish:vsce
      # env:
      # VSCE_PAT: ${{ secrets.VSCE_PAT }}

      # - name: Publish to OpenVSX
      # working-directory: vscode
      # run: npm run publish:ovsx
      # env:
      # OPENVSX_PAT: ${{ secrets.OVSX_TOKEN }}

      # - name: Package Sublime Text Package
      # working-directory: sublime-text
      # run: zip pest.sublime-package *

      # - name: Publish to crates.io
      # working-directory: language-server
      # run: cargo publish --token ${{ secrets.CRATES_TOKEN }}

      - name: Get Changelog
        id: get_changelog
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "COMMITS<<$EOF" >> $GITHUB_OUTPUT
          echo "COMMITS=\"$(awk -v latest="$(grep -Eo '^## v[0-9]+\.[0-9]+\.[0-9]+$' CHANGELOG.md | head -n1)" '/^## v/ {if (header) exit; header=1} /^## v'${latest}'/{print; next} header && !/^## v/{print}' CHANGELOG.md)\"" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            # Checklist Before Publishing

            - [ ] Check VSCode extension was published correctly.
            - [ ] Check crates.io release was published correctly.
            - [ ] Check artifacts were uploaded to this release.
            - [ ] Update release body.

            ${{ steps.get_changelog.outputs.COMMITS }}
          draft: true
          prerelease: false

      # - uses: xresloader/upload-to-github-release@main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     file: "vscode/pest.vsix;sublime-text/pest.sublime-package"
      #     release_id: ${{ steps.create_release.outputs.id }}
      #     overwrite: true

  build-binaries:
    needs: release
    runs-on: ubuntu-latest

    permissions:
      # So we can upload to the release
      contents: write

    strategy:
      matrix:
        target:
          [
            { target: "aarch64-apple-darwin", os: darwin, arch: aarch64 },
            { target: "aarch64-unknown-linux-gnu", os: linux, arch: aarch64 },
            { target: "x86_64-apple-darwin", os: darwin, arch: x86_64 },
            { target: "x86_64-pc-windows-msvc", os: windows, arch: x86_64 },
            { target: "x86_64-unknown-linux-gnu", os: linux, arch: x86_64 },
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup
        uses: ./.github/actions/setup
        with:
          kind: release-compile-binaries
          secret: ${{ secrets.GITHUB_TOKEN }}
          rust-target: ${{ matrix.target.target }}

      - name: Set up Windows
        if: matrix.target.os == 'windows'
        run: sudo apt-get install -y --no-install-recommends mingw-w64 musl-tools gcc-mingw-w64-x86-64-win32
      
      - name: Set up aarch64 Linux
        if: matrix.target.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Set up MacOS Cross Compiler
        if: matrix.target.os == 'darwin'
        uses: Timmmm/setup-osxcross@v2
        with:
          osx-version: "12.3"

      - name: Build binary
        run: cargo build --release --target=${{ matrix.target.target }}

      - name: Package binary
        # needs to be in the form pest-language-server-$OS-$ARCH.tar.gz
        run: tar -czvf pest-language-server-${{ matrix.target.os }}-${{ matrix.target.arch }}.tar.gz -C target/$TARGET/release/*

      - uses: xresloader/upload-to-github-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "./pest-language-server-${{ matrix.target.os }}-${{ matrix.target.arch }}.tar.gz"
          release_id: ${{ needs.release.outputs.release_id }}
